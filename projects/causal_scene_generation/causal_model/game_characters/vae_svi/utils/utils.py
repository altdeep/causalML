import torch
import torch.nn as nn

class Flatten(nn.Module):
    def forward(self, input):
        return input.view(input.size(0), -1)

class UnFlatten(nn.Module):
    def forward(self, input, size=1024):
        return input.view(input.size(0), size, 1, 1)

def convert_prob_string_to_tensor(prob_string, reshape_dim):
    prob_list = [float(x) for x in prob_string.split(" ")]
    return torch.FloatTensor(prob_list).reshape(*reshape_dim).cuda()


def return_values():
    return {
      "action": ["Attacking", "Taunt", "Walking"],
      "reaction": ["Dying", "Hurt", "Idle", "Attacking"],
      "strength": ["Low", "High"],
      "defense": ["Low", "High"],
      "attack": ["Low", "High"],
      "actor": ["Satyr", "Golem"],
      "reactor": ["Satyr", "Golem"],
      "Satyr": ["type1", "type2", "type3"],
      "Golem": ["type1", "type2", "type3"]
  }

def return_cpts():
    return {
    "action": torch.tensor([[[[0.1, 0.3, 0.6], [0.3, 0.5, 0.2]], [[0.3, 0.4, 0.4], [0.5,0.4,0.1]]],
                              [[[0.1, 0.2, 0.7], [0.4,0.3,0.3]], [[0.2, 0.4, 0.4], [0.6, 0.3, 0.1]]]]),
    
    "reaction": torch.tensor([[[[[0.5, 0.4, 0.05, 0.05], [0.2, 0.6, 0.1, 0.1], [0.001, 0.001, 0.997, 0.001]],
                    [[0.4, 0.3,0.1, 0.2], [0.1, 0.5, 0.2, 0.2], [0.001, 0.001, 0.99, 0.008]]],
                    [[[0.1, 0.3, 0.55, 0.05], [0.1, 0.2, 0.65, 0.05], [0.001, 0.001, 0.997, 0.001]],
                    [[0.3, 0.2, 0.3, 0.2],[0.1, 0.3, 0.4, 0.2],[0.001, 0.001, 0.99, 0.008]]]],
                  [[[[0.3, 0.3, 0.399, 0.001],[0.2, 0.4, 0.399, 0.001],[0.001, 0.001, 0.997, 0.001]],
                    [[0.3, 0.4, 0.1, 0.2],[0.3, 0.3, 0.1, 0.3],[0.001, 0.001, 0.99, 0.008]]],
                    [[[0.2, 0.3, 0.49, 0.01],[0.1, 0.2, 0.69, 0.01],[0.001, 0.001, 0.997, 0.001]],
                    [[0.2, 0.2, 0.4, 0.2],[0.1, 0.1, 0.4, 0.4],[0.001, 0.001, 0.99, 0.008]]]]]),
    "character": torch.tensor([0.5, 0.5]),
    "type": torch.tensor([[0.33, 0.34, 0.33], [0.33, 0.34, 0.33]]),
    "strength": torch.tensor([[[0.4, 0.6], [0.2, 0.8], [0.5, 0.5]], [[0.6, 0.4], [0.5, 0.5], [0.8, 0.2]]]),
    "defense": torch.tensor([[[0.9, 0.1], [0.3, 0.7], [0.6, 0.4]], [[0.5, 0.5], [0.4, 0.6], [0.6, 0.4]]]),
    "attack": torch.tensor([[[0.2, 0.8], [0.6, 0.4], [0.8, 0.2]], [[0.75, 0.25], [0.4, 0.6], [0.9, 0.1]]])
}

def return_inverse_cpts():
    return {
    "reaction_strength": convert_prob_string_to_tensor("0.6125566 0.3874434 0.6133058 0.3866942 0.6192763 0.3807237 0.6179714 0.3820286 0.6149248 0.3850752 0.6121950 0.3878050 0.5191074 \
0.4808926 0.5401218 0.4598782 0.5273679 0.4726321 0.5169132 0.4830868 0.5500905 0.4499095 0.5527345 0.4472655 0.4584787 0.5415213 \
0.4553537 0.5446463 0.4549462 0.5450538 0.4568998 0.5431002 0.4535802 0.5464198 0.4542053 0.5457947 0.5010396 0.4989604 0.4848076 \
0.5151924 0.4935912 0.5064088 0.5027230 0.4972770 0.4783055 0.5216945 0.4771059 0.5228941", [4,3,2,2]),
    "reaction_defense": convert_prob_string_to_tensor("0.6661711 0.3338289 0.6525923 0.3474077 0.6628215 0.3371785 0.6695031 0.3304969 0.6468932 0.3531068 0.6444372 0.3555628 0.6253805 \
0.3746195 0.6080135 0.3919865 0.6230644 0.3769356 0.6309901 0.3690099 0.6007180 0.3992820 0.5964528 0.4035472 0.4898905 0.5101095 \
0.5024586 0.4975414 0.4913484 0.5086516 0.4851282 0.5148718 0.5071608 0.4928392 0.5099597 0.4900403 0.5215942 0.4784058 0.5262604 \
0.4737396 0.5265067 0.4734933 0.5236084 0.4763916 0.5286241 0.4713759 0.5278925 0.4721075", [4,3,2,2]),
    "reaction_attack": convert_prob_string_to_tensor("0.5947227 0.4052773 0.6044461 0.3955539 0.6010424 0.3989576 0.5956961 0.4043039 0.6093099 0.3906901 0.6093492 0.3906508 0.6007418 \
0.3992582 0.6116749 0.3883251 0.6064754 0.3935246 0.6008088 0.3991912 0.6171615 0.3828385 0.6178749 0.3821251 0.6056244 0.3943756 \
0.5926854 0.4073146 0.5996507 0.4003493 0.6066288 0.3933712 0.5869918 0.4130082 0.5859743 0.4140257 0.6515096 0.3484904 0.6822071 \
0.3177929 0.6619430 0.3380570 0.6450330 0.3549670 0.6938520 0.3061480 0.6975395 0.3024605", [4,3,2,2]),
    "action_strength": convert_prob_string_to_tensor("0.3427173 0.6572827 0.6122449 0.3877551 0.2010050 0.7989950 0.4748603 0.5251397 0.5140187 0.4859813 0.8213552 0.1786448 0.5148064 \
0.4851936 0.6279070 0.3720930 0.2135922 0.7864078 0.5549133 0.4450867 0.5389610 0.4610390 0.8175938 0.1824062 0.3329193 0.6670807 \
0.5722543 0.4277457 0.1863636 0.8136364 0.4662162 0.5337838 0.4686192 0.5313808 0.7806452 0.2193548", [3,3,2,2]),
    "action_defense": convert_prob_string_to_tensor("0.84822521 0.15177479 0.32653061 0.67346939 0.19974874 0.80025126 0.27932961 0.72067039 0.42056075 0.57943925 0.37577002 0.62422998 \
0.90205011 0.09794989 0.46511628 0.53488372 0.24393204 0.75606796 0.39306358 0.60693642 0.54545455 0.45454545 0.57826649 0.42173351 \
0.95031056 0.04968944 0.62427746 0.37572254 0.44318182 0.55681818 0.55405405 0.44594595 0.71548117 0.28451883 0.70161290 0.29838710", [3,3,2,2]),
    "action_attack": convert_prob_string_to_tensor("0.06976744 0.93023256 0.55102041 0.44897959 0.34673367 0.65326633 0.21229050 0.78770950 0.59813084 0.40186916 0.79466119 0.20533881 \
0.14350797 0.85649203 0.69767442 0.30232558 0.60436893 0.39563107 0.35838150 0.64161850 0.75324675 0.24675325 0.86157827 0.13842173 \
0.39378882 0.60621118 0.90173410 0.09826590 0.82500000 0.17500000 0.67567568 0.32432432 0.92050209 0.07949791 0.96532258 0.03467742", [3,3,2,2])
}

def plot_vae_samples(vae):
    x = torch.zeros([1, 3, 400, 400])
    for i in range(2):
        images = []
        for rr in range(100):
            # get loc from the model
            sample_loc_i = vae.model(x.cuda(), y.cuda())
            img = sample_loc_i[0].view(3, 400, 400).permute(1,2,0).cpu().data.numpy()
            images.append(img)
    return images